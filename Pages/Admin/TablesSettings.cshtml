@page
@model WebPOS.Pages.Admin.TablesSettingsModel
@{
    ViewData["Title"] = "Table Settings";
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
<style>
    .table-map-area {
        position: relative;
        width: 900px;
        height: 600px;
        background: #333;
        border-radius: 18px;
        margin-bottom: 24px;
        overflow: hidden;
    }

    .draggable-table {
        position: absolute;
        cursor: move;
        width: 80px;
        height: 80px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        font-weight: 600;
        font-size: 1.05rem;
        user-select: none;
        z-index: 2;
        box-shadow: 0 2px 10px #0005;
        color: #fff;
        border: 3px solid #bbb;
        transition: box-shadow .16s, border-color .16s;
    }

        .draggable-table.available {
            border-color: #27c26c !important;
        }

        .draggable-table.reserved {
            border-color: #ffb700 !important;
        }

        .draggable-table.occupied {
            border-color: #d71f1f !important;
        }

        .draggable-table.selected {
            box-shadow: 0 0 14px #fff4;
        }
</style>

<h2 class="mb-4">Table Settings</h2>
<form method="post" asp-page-handler="Add" class="row g-3 align-items-end mb-4">
    <div class="col-auto">
        <input asp-for="Table.Name" class="form-control" placeholder="Table Name" />
    </div>
    <div class="col-auto">
        <input asp-for="Table.Number" class="form-control" placeholder="Number" type="number" min="1" />
    </div>
    <div class="col-auto">
        <select asp-for="Table.Shape" class="form-select">
            <option value="rectangle">Rectangle</option>
            <option value="circle">Circle</option>
        </select>
    </div>
    <div class="col-auto">
        <input asp-for="Table.Color" type="color" class="form-control form-control-color" style="width: 3rem; height: 2.5rem;" />
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-success">Add Table</button>
    </div>
</form>

<div class="table-map-area" id="tableMapArea">
    @foreach (var t in Model.Tables)
    {
        var borderClass = t.Status == "occupied"
        ? "occupied"
        : t.Status == "reserved"
        ? "reserved"
        : "available";

        var tooltip = $"Table: {t.Name} (#{t.Number})&#10;Status: {t.Status}&#10;Pos: ({t.X},{t.Y})";
        <div class="draggable-table @borderClass"
             id="draggable-table-@t.TableId"
             data-tableid="@t.TableId"
             data-status="@t.Status"
             title="@tooltip"
             style="
                    left:@(t.X)px;
                    top:@(t.Y)px;
                    background:@t.Color;
                    border-radius:@(t.Shape == "circle" ? "50%" : "14px");
                 ">
            <span>@t.Name</span>
            <span style="font-size:13px; font-weight:400;">#@t.Number</span>
            <button type="button" class="btn btn-xs btn-danger mt-2" onclick="deleteTable(@t.TableId, event)" style="font-size:11px; padding:2px 8px;">Delete</button>
        </div>
    }
</div>

<script>
    let dragTable = null, offsetX = 0, offsetY = 0;

    document.querySelectorAll('.draggable-table').forEach(el => {
        el.addEventListener('mousedown', function (e) {
            dragTable = el;
            offsetX = e.clientX - el.offsetLeft;
            offsetY = e.clientY - el.offsetTop;
            el.classList.add("selected");
        });
    });

    document.addEventListener('mousemove', function (e) {
        if (!dragTable) return;
        let area = document.getElementById('tableMapArea');
        let areaRect = area.getBoundingClientRect();
        let newX = e.clientX - areaRect.left - offsetX;
        let newY = e.clientY - areaRect.top - offsetY;

        // Boundaries
        newX = Math.max(0, Math.min(area.offsetWidth - dragTable.offsetWidth, newX));
        newY = Math.max(0, Math.min(area.offsetHeight - dragTable.offsetHeight, newY));

        dragTable.style.left = newX + "px";
        dragTable.style.top = newY + "px";
    });

    document.addEventListener('mouseup', function () {
        if (dragTable) {
            dragTable.classList.remove("selected");
            // Save position instantly (live sync)
            let tableId = dragTable.getAttribute('data-tableid');
            let x = parseInt(dragTable.style.left, 10) || 0;
            let y = parseInt(dragTable.style.top, 10) || 0;
            savePosition(tableId, x, y);
        }
        dragTable = null;
    });

    function savePosition(tableId, x, y) {
        fetch('?handler=SavePositions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify([{ tableId, x, y }])
        });
    }

    function deleteTable(tableId, event) {
        event.stopPropagation();
        if (!confirm("Delete this table?")) return;
        fetch(`?handler=Delete&id=${tableId}`, { method: 'POST' })
            .then(() => location.reload());
    }
</script>
